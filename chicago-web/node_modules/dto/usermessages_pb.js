/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
var permission_pb = require('./permission_pb.js');
var user_pb = require('./user_pb.js');
goog.exportSymbol('proto.com.chicago.dto.LoginUserRequest', null, global);
goog.exportSymbol('proto.com.chicago.dto.SetUserAvatarRequest', null, global);
goog.exportSymbol('proto.com.chicago.dto.SetUserPasswordRequest', null, global);
goog.exportSymbol('proto.com.chicago.dto.SetUserPermissionsRequest', null, global);
goog.exportSymbol('proto.com.chicago.dto.SetUserPermissionsResponse', null, global);
goog.exportSymbol('proto.com.chicago.dto.UserRequest', null, global);
goog.exportSymbol('proto.com.chicago.dto.UserResponse', null, global);
goog.exportSymbol('proto.com.chicago.dto.UserType', null, global);
goog.exportSymbol('proto.com.chicago.dto.UsersRequest', null, global);
goog.exportSymbol('proto.com.chicago.dto.UsersResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.SetUserPermissionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.SetUserPermissionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.SetUserPermissionsRequest.displayName = 'proto.com.chicago.dto.SetUserPermissionsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.SetUserPermissionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.SetUserPermissionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.SetUserPermissionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.SetUserPermissionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    permissions: (f = msg.getPermissions()) && user_pb.UserPermissions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.SetUserPermissionsRequest}
 */
proto.com.chicago.dto.SetUserPermissionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.SetUserPermissionsRequest;
  return proto.com.chicago.dto.SetUserPermissionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.SetUserPermissionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.SetUserPermissionsRequest}
 */
proto.com.chicago.dto.SetUserPermissionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new user_pb.UserPermissions;
      reader.readMessage(value,user_pb.UserPermissions.deserializeBinaryFromReader);
      msg.setPermissions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.SetUserPermissionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.SetUserPermissionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.SetUserPermissionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.SetUserPermissionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPermissions();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      user_pb.UserPermissions.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserPermissions permissions = 1;
 * @return {?proto.com.chicago.dto.UserPermissions}
 */
proto.com.chicago.dto.SetUserPermissionsRequest.prototype.getPermissions = function() {
  return /** @type{?proto.com.chicago.dto.UserPermissions} */ (
    jspb.Message.getWrapperField(this, user_pb.UserPermissions, 1));
};


/** @param {?proto.com.chicago.dto.UserPermissions|undefined} value */
proto.com.chicago.dto.SetUserPermissionsRequest.prototype.setPermissions = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.chicago.dto.SetUserPermissionsRequest.prototype.clearPermissions = function() {
  this.setPermissions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.chicago.dto.SetUserPermissionsRequest.prototype.hasPermissions = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.SetUserPermissionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.SetUserPermissionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.SetUserPermissionsResponse.displayName = 'proto.com.chicago.dto.SetUserPermissionsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.SetUserPermissionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.SetUserPermissionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.SetUserPermissionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.SetUserPermissionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionError: (f = msg.getTransactionError()) && common_pb.TransactionError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.SetUserPermissionsResponse}
 */
proto.com.chicago.dto.SetUserPermissionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.SetUserPermissionsResponse;
  return proto.com.chicago.dto.SetUserPermissionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.SetUserPermissionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.SetUserPermissionsResponse}
 */
proto.com.chicago.dto.SetUserPermissionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.TransactionError;
      reader.readMessage(value,common_pb.TransactionError.deserializeBinaryFromReader);
      msg.setTransactionError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.SetUserPermissionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.SetUserPermissionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.SetUserPermissionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.SetUserPermissionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.TransactionError.serializeBinaryToWriter
    );
  }
};


/**
 * optional TransactionError transaction_error = 1;
 * @return {?proto.com.chicago.dto.TransactionError}
 */
proto.com.chicago.dto.SetUserPermissionsResponse.prototype.getTransactionError = function() {
  return /** @type{?proto.com.chicago.dto.TransactionError} */ (
    jspb.Message.getWrapperField(this, common_pb.TransactionError, 1));
};


/** @param {?proto.com.chicago.dto.TransactionError|undefined} value */
proto.com.chicago.dto.SetUserPermissionsResponse.prototype.setTransactionError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.chicago.dto.SetUserPermissionsResponse.prototype.clearTransactionError = function() {
  this.setTransactionError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.chicago.dto.SetUserPermissionsResponse.prototype.hasTransactionError = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.UserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.UserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.UserRequest.displayName = 'proto.com.chicago.dto.UserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.UserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.UserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.UserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.UserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    crudOperation: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    user: (f = msg.getUser()) && user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.UserRequest}
 */
proto.com.chicago.dto.UserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.UserRequest;
  return proto.com.chicago.dto.UserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.UserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.UserRequest}
 */
proto.com.chicago.dto.UserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.com.chicago.dto.CrudOperation} */ (reader.readEnum());
      msg.setCrudOperation(value);
      break;
    case 2:
      var value = /** @type {!proto.com.chicago.dto.UserType} */ (reader.readEnum());
      msg.setUserType(value);
      break;
    case 3:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.UserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.UserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.UserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.UserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCrudOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional CrudOperation crud_operation = 1;
 * @return {!proto.com.chicago.dto.CrudOperation}
 */
proto.com.chicago.dto.UserRequest.prototype.getCrudOperation = function() {
  return /** @type {!proto.com.chicago.dto.CrudOperation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.com.chicago.dto.CrudOperation} value */
proto.com.chicago.dto.UserRequest.prototype.setCrudOperation = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional UserType user_type = 2;
 * @return {!proto.com.chicago.dto.UserType}
 */
proto.com.chicago.dto.UserRequest.prototype.getUserType = function() {
  return /** @type {!proto.com.chicago.dto.UserType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.com.chicago.dto.UserType} value */
proto.com.chicago.dto.UserRequest.prototype.setUserType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional User user = 3;
 * @return {?proto.com.chicago.dto.User}
 */
proto.com.chicago.dto.UserRequest.prototype.getUser = function() {
  return /** @type{?proto.com.chicago.dto.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 3));
};


/** @param {?proto.com.chicago.dto.User|undefined} value */
proto.com.chicago.dto.UserRequest.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.com.chicago.dto.UserRequest.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.chicago.dto.UserRequest.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.UserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.UserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.UserResponse.displayName = 'proto.com.chicago.dto.UserResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.UserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.UserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.UserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.UserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && user_pb.User.toObject(includeInstance, f),
    transactionError: (f = msg.getTransactionError()) && common_pb.TransactionError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.UserResponse}
 */
proto.com.chicago.dto.UserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.UserResponse;
  return proto.com.chicago.dto.UserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.UserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.UserResponse}
 */
proto.com.chicago.dto.UserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new common_pb.TransactionError;
      reader.readMessage(value,common_pb.TransactionError.deserializeBinaryFromReader);
      msg.setTransactionError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.UserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.UserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.UserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.UserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getTransactionError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.TransactionError.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.com.chicago.dto.User}
 */
proto.com.chicago.dto.UserResponse.prototype.getUser = function() {
  return /** @type{?proto.com.chicago.dto.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 1));
};


/** @param {?proto.com.chicago.dto.User|undefined} value */
proto.com.chicago.dto.UserResponse.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.chicago.dto.UserResponse.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.chicago.dto.UserResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransactionError transaction_error = 2;
 * @return {?proto.com.chicago.dto.TransactionError}
 */
proto.com.chicago.dto.UserResponse.prototype.getTransactionError = function() {
  return /** @type{?proto.com.chicago.dto.TransactionError} */ (
    jspb.Message.getWrapperField(this, common_pb.TransactionError, 2));
};


/** @param {?proto.com.chicago.dto.TransactionError|undefined} value */
proto.com.chicago.dto.UserResponse.prototype.setTransactionError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.com.chicago.dto.UserResponse.prototype.clearTransactionError = function() {
  this.setTransactionError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.chicago.dto.UserResponse.prototype.hasTransactionError = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.LoginUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.LoginUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.LoginUserRequest.displayName = 'proto.com.chicago.dto.LoginUserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.LoginUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.LoginUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.LoginUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.LoginUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && user_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.LoginUserRequest}
 */
proto.com.chicago.dto.LoginUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.LoginUserRequest;
  return proto.com.chicago.dto.LoginUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.LoginUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.LoginUserRequest}
 */
proto.com.chicago.dto.LoginUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.LoginUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.LoginUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.LoginUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.LoginUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.com.chicago.dto.User}
 */
proto.com.chicago.dto.LoginUserRequest.prototype.getUser = function() {
  return /** @type{?proto.com.chicago.dto.User} */ (
    jspb.Message.getWrapperField(this, user_pb.User, 1));
};


/** @param {?proto.com.chicago.dto.User|undefined} value */
proto.com.chicago.dto.LoginUserRequest.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.chicago.dto.LoginUserRequest.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.chicago.dto.LoginUserRequest.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.SetUserAvatarRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.SetUserAvatarRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.SetUserAvatarRequest.displayName = 'proto.com.chicago.dto.SetUserAvatarRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.SetUserAvatarRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.SetUserAvatarRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.SetUserAvatarRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.SetUserAvatarRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userAvatar: (f = msg.getUserAvatar()) && user_pb.UserAvatar.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.SetUserAvatarRequest}
 */
proto.com.chicago.dto.SetUserAvatarRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.SetUserAvatarRequest;
  return proto.com.chicago.dto.SetUserAvatarRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.SetUserAvatarRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.SetUserAvatarRequest}
 */
proto.com.chicago.dto.SetUserAvatarRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new user_pb.UserAvatar;
      reader.readMessage(value,user_pb.UserAvatar.deserializeBinaryFromReader);
      msg.setUserAvatar(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.SetUserAvatarRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.SetUserAvatarRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.SetUserAvatarRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.SetUserAvatarRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserAvatar();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      user_pb.UserAvatar.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserAvatar user_avatar = 1;
 * @return {?proto.com.chicago.dto.UserAvatar}
 */
proto.com.chicago.dto.SetUserAvatarRequest.prototype.getUserAvatar = function() {
  return /** @type{?proto.com.chicago.dto.UserAvatar} */ (
    jspb.Message.getWrapperField(this, user_pb.UserAvatar, 1));
};


/** @param {?proto.com.chicago.dto.UserAvatar|undefined} value */
proto.com.chicago.dto.SetUserAvatarRequest.prototype.setUserAvatar = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.chicago.dto.SetUserAvatarRequest.prototype.clearUserAvatar = function() {
  this.setUserAvatar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.chicago.dto.SetUserAvatarRequest.prototype.hasUserAvatar = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.SetUserPasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.SetUserPasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.SetUserPasswordRequest.displayName = 'proto.com.chicago.dto.SetUserPasswordRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.SetUserPasswordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.SetUserPasswordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.SetUserPasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.SetUserPasswordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userPassword: (f = msg.getUserPassword()) && user_pb.UserPassword.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.SetUserPasswordRequest}
 */
proto.com.chicago.dto.SetUserPasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.SetUserPasswordRequest;
  return proto.com.chicago.dto.SetUserPasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.SetUserPasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.SetUserPasswordRequest}
 */
proto.com.chicago.dto.SetUserPasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new user_pb.UserPassword;
      reader.readMessage(value,user_pb.UserPassword.deserializeBinaryFromReader);
      msg.setUserPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.SetUserPasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.SetUserPasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.SetUserPasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.SetUserPasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserPassword();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      user_pb.UserPassword.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserPassword user_password = 1;
 * @return {?proto.com.chicago.dto.UserPassword}
 */
proto.com.chicago.dto.SetUserPasswordRequest.prototype.getUserPassword = function() {
  return /** @type{?proto.com.chicago.dto.UserPassword} */ (
    jspb.Message.getWrapperField(this, user_pb.UserPassword, 1));
};


/** @param {?proto.com.chicago.dto.UserPassword|undefined} value */
proto.com.chicago.dto.SetUserPasswordRequest.prototype.setUserPassword = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.com.chicago.dto.SetUserPasswordRequest.prototype.clearUserPassword = function() {
  this.setUserPassword(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.chicago.dto.SetUserPasswordRequest.prototype.hasUserPassword = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.UsersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.UsersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.UsersRequest.displayName = 'proto.com.chicago.dto.UsersRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.UsersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.UsersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.UsersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.UsersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organizationId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.UsersRequest}
 */
proto.com.chicago.dto.UsersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.UsersRequest;
  return proto.com.chicago.dto.UsersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.UsersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.UsersRequest}
 */
proto.com.chicago.dto.UsersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.UsersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.UsersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.UsersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.UsersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganizationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string organization_id = 1;
 * @return {string}
 */
proto.com.chicago.dto.UsersRequest.prototype.getOrganizationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.chicago.dto.UsersRequest.prototype.setOrganizationId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.UsersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.chicago.dto.UsersResponse.repeatedFields_, null);
};
goog.inherits(proto.com.chicago.dto.UsersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.UsersResponse.displayName = 'proto.com.chicago.dto.UsersResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.chicago.dto.UsersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.UsersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.UsersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.UsersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.UsersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    user_pb.User.toObject, includeInstance),
    transactionError: (f = msg.getTransactionError()) && common_pb.TransactionError.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.UsersResponse}
 */
proto.com.chicago.dto.UsersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.UsersResponse;
  return proto.com.chicago.dto.UsersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.UsersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.UsersResponse}
 */
proto.com.chicago.dto.UsersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new user_pb.User;
      reader.readMessage(value,user_pb.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 2:
      var value = new common_pb.TransactionError;
      reader.readMessage(value,common_pb.TransactionError.deserializeBinaryFromReader);
      msg.setTransactionError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.UsersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.UsersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.UsersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.UsersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      user_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getTransactionError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.TransactionError.serializeBinaryToWriter
    );
  }
};


/**
 * repeated User users = 1;
 * @return {!Array.<!proto.com.chicago.dto.User>}
 */
proto.com.chicago.dto.UsersResponse.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.com.chicago.dto.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, user_pb.User, 1));
};


/** @param {!Array.<!proto.com.chicago.dto.User>} value */
proto.com.chicago.dto.UsersResponse.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.chicago.dto.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.chicago.dto.User}
 */
proto.com.chicago.dto.UsersResponse.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.chicago.dto.User, opt_index);
};


proto.com.chicago.dto.UsersResponse.prototype.clearUsersList = function() {
  this.setUsersList([]);
};


/**
 * optional TransactionError transaction_error = 2;
 * @return {?proto.com.chicago.dto.TransactionError}
 */
proto.com.chicago.dto.UsersResponse.prototype.getTransactionError = function() {
  return /** @type{?proto.com.chicago.dto.TransactionError} */ (
    jspb.Message.getWrapperField(this, common_pb.TransactionError, 2));
};


/** @param {?proto.com.chicago.dto.TransactionError|undefined} value */
proto.com.chicago.dto.UsersResponse.prototype.setTransactionError = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.com.chicago.dto.UsersResponse.prototype.clearTransactionError = function() {
  this.setTransactionError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.com.chicago.dto.UsersResponse.prototype.hasTransactionError = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.com.chicago.dto.UserType = {
  ADMIN: 0,
  STANDARD: 1
};

goog.object.extend(exports, proto.com.chicago.dto);
