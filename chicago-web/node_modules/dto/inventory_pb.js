/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.com.chicago.dto.Inventory', null, global);
goog.exportSymbol('proto.com.chicago.dto.InventoryCatalogItem', null, global);
goog.exportSymbol('proto.com.chicago.dto.InventoryItemBrand', null, global);
goog.exportSymbol('proto.com.chicago.dto.InventoryItemCategory', null, global);
goog.exportSymbol('proto.com.chicago.dto.InventoryItemSupplier', null, global);
goog.exportSymbol('proto.com.chicago.dto.InventoryItemUnit', null, global);
goog.exportSymbol('proto.com.chicago.dto.InventoryLocation', null, global);
goog.exportSymbol('proto.com.chicago.dto.InventoryOperation', null, global);
goog.exportSymbol('proto.com.chicago.dto.InventoryPosition', null, global);
goog.exportSymbol('proto.com.chicago.dto.InventoryTransfer', null, global);
goog.exportSymbol('proto.com.chicago.dto.OperationType', null, global);
goog.exportSymbol('proto.com.chicago.dto.TransferState', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.Inventory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.Inventory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.Inventory.displayName = 'proto.com.chicago.dto.Inventory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.Inventory.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.Inventory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.Inventory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.Inventory.toObject = function(includeInstance, msg) {
  var f, obj = {
    organizationId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inventoryId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    inventoryName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.Inventory}
 */
proto.com.chicago.dto.Inventory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.Inventory;
  return proto.com.chicago.dto.Inventory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.Inventory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.Inventory}
 */
proto.com.chicago.dto.Inventory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInventoryId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInventoryName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.Inventory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.Inventory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.Inventory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.Inventory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrganizationId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInventoryId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInventoryName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string organization_id = 1;
 * @return {string}
 */
proto.com.chicago.dto.Inventory.prototype.getOrganizationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.chicago.dto.Inventory.prototype.setOrganizationId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string inventory_id = 2;
 * @return {string}
 */
proto.com.chicago.dto.Inventory.prototype.getInventoryId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.chicago.dto.Inventory.prototype.setInventoryId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string inventory_name = 3;
 * @return {string}
 */
proto.com.chicago.dto.Inventory.prototype.getInventoryName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.chicago.dto.Inventory.prototype.setInventoryName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.com.chicago.dto.Inventory.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.chicago.dto.Inventory.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.InventoryOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.InventoryOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.InventoryOperation.displayName = 'proto.com.chicago.dto.InventoryOperation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.InventoryOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.InventoryOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.InventoryOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    inventoryId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    operationType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    itemId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 4, 0),
    amount: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.InventoryOperation}
 */
proto.com.chicago.dto.InventoryOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.InventoryOperation;
  return proto.com.chicago.dto.InventoryOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.InventoryOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.InventoryOperation}
 */
proto.com.chicago.dto.InventoryOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInventoryId(value);
      break;
    case 2:
      var value = /** @type {!proto.com.chicago.dto.OperationType} */ (reader.readEnum());
      msg.setOperationType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuantity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.InventoryOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.InventoryOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.InventoryOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInventoryId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOperationType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional string inventory_id = 1;
 * @return {string}
 */
proto.com.chicago.dto.InventoryOperation.prototype.getInventoryId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryOperation.prototype.setInventoryId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OperationType operation_type = 2;
 * @return {!proto.com.chicago.dto.OperationType}
 */
proto.com.chicago.dto.InventoryOperation.prototype.getOperationType = function() {
  return /** @type {!proto.com.chicago.dto.OperationType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.com.chicago.dto.OperationType} value */
proto.com.chicago.dto.InventoryOperation.prototype.setOperationType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string item_id = 3;
 * @return {string}
 */
proto.com.chicago.dto.InventoryOperation.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryOperation.prototype.setItemId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 quantity = 4;
 * @return {number}
 */
proto.com.chicago.dto.InventoryOperation.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryOperation.prototype.setQuantity = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float amount = 5;
 * @return {number}
 */
proto.com.chicago.dto.InventoryOperation.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryOperation.prototype.setAmount = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.InventoryTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.InventoryTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.InventoryTransfer.displayName = 'proto.com.chicago.dto.InventoryTransfer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.InventoryTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.InventoryTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.InventoryTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    inventoryFromId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    inventoryToId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    itemId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 4, 0),
    amount: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    transferState: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.InventoryTransfer}
 */
proto.com.chicago.dto.InventoryTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.InventoryTransfer;
  return proto.com.chicago.dto.InventoryTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.InventoryTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.InventoryTransfer}
 */
proto.com.chicago.dto.InventoryTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInventoryFromId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInventoryToId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuantity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    case 6:
      var value = /** @type {!proto.com.chicago.dto.TransferState} */ (reader.readEnum());
      msg.setTransferState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.InventoryTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.InventoryTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.InventoryTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInventoryFromId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInventoryToId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getTransferState();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string inventory_from_id = 1;
 * @return {string}
 */
proto.com.chicago.dto.InventoryTransfer.prototype.getInventoryFromId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryTransfer.prototype.setInventoryFromId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string inventory_to_id = 2;
 * @return {string}
 */
proto.com.chicago.dto.InventoryTransfer.prototype.getInventoryToId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryTransfer.prototype.setInventoryToId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string item_id = 3;
 * @return {string}
 */
proto.com.chicago.dto.InventoryTransfer.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryTransfer.prototype.setItemId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 quantity = 4;
 * @return {number}
 */
proto.com.chicago.dto.InventoryTransfer.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryTransfer.prototype.setQuantity = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float amount = 5;
 * @return {number}
 */
proto.com.chicago.dto.InventoryTransfer.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryTransfer.prototype.setAmount = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional TransferState transfer_state = 6;
 * @return {!proto.com.chicago.dto.TransferState}
 */
proto.com.chicago.dto.InventoryTransfer.prototype.getTransferState = function() {
  return /** @type {!proto.com.chicago.dto.TransferState} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.com.chicago.dto.TransferState} value */
proto.com.chicago.dto.InventoryTransfer.prototype.setTransferState = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.InventoryPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.InventoryPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.InventoryPosition.displayName = 'proto.com.chicago.dto.InventoryPosition';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.InventoryPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.InventoryPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.InventoryPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    inventoryId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    itemId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    amount: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    image: msg.getImage_asB64(),
    description: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.InventoryPosition}
 */
proto.com.chicago.dto.InventoryPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.InventoryPosition;
  return proto.com.chicago.dto.InventoryPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.InventoryPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.InventoryPosition}
 */
proto.com.chicago.dto.InventoryPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInventoryId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuantity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.InventoryPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.InventoryPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.InventoryPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInventoryId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string inventory_id = 1;
 * @return {string}
 */
proto.com.chicago.dto.InventoryPosition.prototype.getInventoryId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryPosition.prototype.setInventoryId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string item_id = 2;
 * @return {string}
 */
proto.com.chicago.dto.InventoryPosition.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryPosition.prototype.setItemId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 quantity = 3;
 * @return {number}
 */
proto.com.chicago.dto.InventoryPosition.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryPosition.prototype.setQuantity = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float amount = 4;
 * @return {number}
 */
proto.com.chicago.dto.InventoryPosition.prototype.getAmount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryPosition.prototype.setAmount = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional bytes image = 5;
 * @return {!(string|Uint8Array)}
 */
proto.com.chicago.dto.InventoryPosition.prototype.getImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes image = 5;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
proto.com.chicago.dto.InventoryPosition.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * optional bytes image = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.InventoryPosition.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/** @param {!(string|Uint8Array)} value */
proto.com.chicago.dto.InventoryPosition.prototype.setImage = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.com.chicago.dto.InventoryPosition.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryPosition.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.InventoryCatalogItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.InventoryCatalogItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.InventoryCatalogItem.displayName = 'proto.com.chicago.dto.InventoryCatalogItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.InventoryCatalogItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.InventoryCatalogItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryCatalogItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    itemId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    itemCategoryId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    itemBrandId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    itemUnitId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    itemSupplierId: jspb.Message.getFieldWithDefault(msg, 6, ""),
    description: jspb.Message.getFieldWithDefault(msg, 7, ""),
    weightNet: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    weightGross: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    packageWeight: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    quantityPerPack: jspb.Message.getFieldWithDefault(msg, 11, 0),
    inboundQuantity: jspb.Message.getFieldWithDefault(msg, 12, 0),
    inboundUnitId: jspb.Message.getFieldWithDefault(msg, 13, ""),
    outboundQuantity: jspb.Message.getFieldWithDefault(msg, 14, 0),
    outboundUnitId: jspb.Message.getFieldWithDefault(msg, 15, ""),
    locationId: jspb.Message.getFieldWithDefault(msg, 16, ""),
    ean13: jspb.Message.getFieldWithDefault(msg, 17, ""),
    vendorCode: jspb.Message.getFieldWithDefault(msg, 18, ""),
    discontinued: jspb.Message.getFieldWithDefault(msg, 19, false),
    image: msg.getImage_asB64(),
    certificate: jspb.Message.getFieldWithDefault(msg, 21, ""),
    notes: jspb.Message.getFieldWithDefault(msg, 22, ""),
    vendorPrice: +jspb.Message.getFieldWithDefault(msg, 23, 0.0),
    specialPrice: +jspb.Message.getFieldWithDefault(msg, 24, 0.0),
    retailPrice: +jspb.Message.getFieldWithDefault(msg, 25, 0.0),
    createDatetime: jspb.Message.getFieldWithDefault(msg, 26, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.InventoryCatalogItem}
 */
proto.com.chicago.dto.InventoryCatalogItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.InventoryCatalogItem;
  return proto.com.chicago.dto.InventoryCatalogItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.InventoryCatalogItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.InventoryCatalogItem}
 */
proto.com.chicago.dto.InventoryCatalogItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemCategoryId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemBrandId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemUnitId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemSupplierId(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeightNet(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWeightGross(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPackageWeight(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQuantityPerPack(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInboundQuantity(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setInboundUnitId(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOutboundQuantity(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutboundUnitId(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocationId(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setEan13(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendorCode(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDiscontinued(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertificate(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVendorPrice(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpecialPrice(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRetailPrice(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateDatetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.InventoryCatalogItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.InventoryCatalogItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryCatalogItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getItemCategoryId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getItemBrandId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getItemUnitId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getItemSupplierId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getWeightNet();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getWeightGross();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getPackageWeight();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getQuantityPerPack();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getInboundQuantity();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getInboundUnitId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getOutboundQuantity();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getOutboundUnitId();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getLocationId();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getEan13();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getVendorCode();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getDiscontinued();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      20,
      f
    );
  }
  f = message.getCertificate();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getVendorPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      23,
      f
    );
  }
  f = message.getSpecialPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      24,
      f
    );
  }
  f = message.getRetailPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      25,
      f
    );
  }
  f = message.getCreateDatetime();
  if (f !== 0) {
    writer.writeInt64(
      26,
      f
    );
  }
};


/**
 * optional string entity_id = 1;
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setEntityId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string item_id = 2;
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setItemId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string item_category_id = 3;
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getItemCategoryId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setItemCategoryId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string item_brand_id = 4;
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getItemBrandId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setItemBrandId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string item_unit_id = 5;
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getItemUnitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setItemUnitId = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string item_supplier_id = 6;
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getItemSupplierId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setItemSupplierId = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string description = 7;
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional float weight_net = 8;
 * @return {number}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getWeightNet = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setWeightNet = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float weight_gross = 9;
 * @return {number}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getWeightGross = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setWeightGross = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float package_weight = 10;
 * @return {number}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getPackageWeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setPackageWeight = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional int32 quantity_per_pack = 11;
 * @return {number}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getQuantityPerPack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setQuantityPerPack = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 inbound_quantity = 12;
 * @return {number}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getInboundQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setInboundQuantity = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional string inbound_unit_id = 13;
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getInboundUnitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setInboundUnitId = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int32 outbound_quantity = 14;
 * @return {number}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getOutboundQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setOutboundQuantity = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string outbound_unit_id = 15;
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getOutboundUnitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setOutboundUnitId = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string location_id = 16;
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getLocationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setLocationId = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string ean13 = 17;
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getEan13 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setEan13 = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string vendor_code = 18;
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getVendorCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setVendorCode = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional bool discontinued = 19;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getDiscontinued = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 19, false));
};


/** @param {boolean} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setDiscontinued = function(value) {
  jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * optional bytes image = 20;
 * @return {!(string|Uint8Array)}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes image = 20;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * optional bytes image = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/** @param {!(string|Uint8Array)} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setImage = function(value) {
  jspb.Message.setProto3BytesField(this, 20, value);
};


/**
 * optional string certificate = 21;
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setCertificate = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string notes = 22;
 * @return {string}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setNotes = function(value) {
  jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional float vendor_price = 23;
 * @return {number}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getVendorPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 23, 0.0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setVendorPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 23, value);
};


/**
 * optional float special_price = 24;
 * @return {number}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getSpecialPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 24, 0.0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setSpecialPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 24, value);
};


/**
 * optional float retail_price = 25;
 * @return {number}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getRetailPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 25, 0.0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setRetailPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 25, value);
};


/**
 * optional int64 create_datetime = 26;
 * @return {number}
 */
proto.com.chicago.dto.InventoryCatalogItem.prototype.getCreateDatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {number} value */
proto.com.chicago.dto.InventoryCatalogItem.prototype.setCreateDatetime = function(value) {
  jspb.Message.setProto3IntField(this, 26, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.InventoryItemCategory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.InventoryItemCategory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.InventoryItemCategory.displayName = 'proto.com.chicago.dto.InventoryItemCategory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.InventoryItemCategory.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.InventoryItemCategory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.InventoryItemCategory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryItemCategory.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    categoryName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    categoryId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.InventoryItemCategory}
 */
proto.com.chicago.dto.InventoryItemCategory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.InventoryItemCategory;
  return proto.com.chicago.dto.InventoryItemCategory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.InventoryItemCategory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.InventoryItemCategory}
 */
proto.com.chicago.dto.InventoryItemCategory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategoryName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategoryId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.InventoryItemCategory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.InventoryItemCategory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.InventoryItemCategory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryItemCategory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCategoryName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCategoryId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string entity_id = 1;
 * @return {string}
 */
proto.com.chicago.dto.InventoryItemCategory.prototype.getEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryItemCategory.prototype.setEntityId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string category_name = 2;
 * @return {string}
 */
proto.com.chicago.dto.InventoryItemCategory.prototype.getCategoryName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryItemCategory.prototype.setCategoryName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string category_id = 3;
 * @return {string}
 */
proto.com.chicago.dto.InventoryItemCategory.prototype.getCategoryId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryItemCategory.prototype.setCategoryId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.InventoryItemBrand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.InventoryItemBrand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.InventoryItemBrand.displayName = 'proto.com.chicago.dto.InventoryItemBrand';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.InventoryItemBrand.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.InventoryItemBrand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.InventoryItemBrand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryItemBrand.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    brandName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    brandId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.InventoryItemBrand}
 */
proto.com.chicago.dto.InventoryItemBrand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.InventoryItemBrand;
  return proto.com.chicago.dto.InventoryItemBrand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.InventoryItemBrand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.InventoryItemBrand}
 */
proto.com.chicago.dto.InventoryItemBrand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrandName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrandId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.InventoryItemBrand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.InventoryItemBrand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.InventoryItemBrand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryItemBrand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBrandName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBrandId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string entity_id = 1;
 * @return {string}
 */
proto.com.chicago.dto.InventoryItemBrand.prototype.getEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryItemBrand.prototype.setEntityId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string brand_name = 2;
 * @return {string}
 */
proto.com.chicago.dto.InventoryItemBrand.prototype.getBrandName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryItemBrand.prototype.setBrandName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string brand_id = 3;
 * @return {string}
 */
proto.com.chicago.dto.InventoryItemBrand.prototype.getBrandId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryItemBrand.prototype.setBrandId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.InventoryItemUnit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.InventoryItemUnit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.InventoryItemUnit.displayName = 'proto.com.chicago.dto.InventoryItemUnit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.InventoryItemUnit.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.InventoryItemUnit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.InventoryItemUnit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryItemUnit.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    unitName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unitId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.InventoryItemUnit}
 */
proto.com.chicago.dto.InventoryItemUnit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.InventoryItemUnit;
  return proto.com.chicago.dto.InventoryItemUnit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.InventoryItemUnit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.InventoryItemUnit}
 */
proto.com.chicago.dto.InventoryItemUnit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnitId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.InventoryItemUnit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.InventoryItemUnit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.InventoryItemUnit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryItemUnit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUnitName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnitId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string entity_id = 1;
 * @return {string}
 */
proto.com.chicago.dto.InventoryItemUnit.prototype.getEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryItemUnit.prototype.setEntityId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string unit_name = 2;
 * @return {string}
 */
proto.com.chicago.dto.InventoryItemUnit.prototype.getUnitName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryItemUnit.prototype.setUnitName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string unit_id = 3;
 * @return {string}
 */
proto.com.chicago.dto.InventoryItemUnit.prototype.getUnitId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryItemUnit.prototype.setUnitId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.InventoryItemSupplier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.InventoryItemSupplier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.InventoryItemSupplier.displayName = 'proto.com.chicago.dto.InventoryItemSupplier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.InventoryItemSupplier.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.InventoryItemSupplier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.InventoryItemSupplier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryItemSupplier.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    supplierName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    supplierId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.InventoryItemSupplier}
 */
proto.com.chicago.dto.InventoryItemSupplier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.InventoryItemSupplier;
  return proto.com.chicago.dto.InventoryItemSupplier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.InventoryItemSupplier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.InventoryItemSupplier}
 */
proto.com.chicago.dto.InventoryItemSupplier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSupplierName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSupplierId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.InventoryItemSupplier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.InventoryItemSupplier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.InventoryItemSupplier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryItemSupplier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSupplierName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSupplierId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string entity_id = 1;
 * @return {string}
 */
proto.com.chicago.dto.InventoryItemSupplier.prototype.getEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryItemSupplier.prototype.setEntityId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string supplier_name = 2;
 * @return {string}
 */
proto.com.chicago.dto.InventoryItemSupplier.prototype.getSupplierName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryItemSupplier.prototype.setSupplierName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string supplier_id = 3;
 * @return {string}
 */
proto.com.chicago.dto.InventoryItemSupplier.prototype.getSupplierId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryItemSupplier.prototype.setSupplierId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.chicago.dto.InventoryLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.chicago.dto.InventoryLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.com.chicago.dto.InventoryLocation.displayName = 'proto.com.chicago.dto.InventoryLocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.chicago.dto.InventoryLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.com.chicago.dto.InventoryLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.chicago.dto.InventoryLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    entityId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    locationName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    locationId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.chicago.dto.InventoryLocation}
 */
proto.com.chicago.dto.InventoryLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.chicago.dto.InventoryLocation;
  return proto.com.chicago.dto.InventoryLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.chicago.dto.InventoryLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.chicago.dto.InventoryLocation}
 */
proto.com.chicago.dto.InventoryLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocationName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.chicago.dto.InventoryLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.chicago.dto.InventoryLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.chicago.dto.InventoryLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.chicago.dto.InventoryLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntityId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLocationName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLocationId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string entity_id = 1;
 * @return {string}
 */
proto.com.chicago.dto.InventoryLocation.prototype.getEntityId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryLocation.prototype.setEntityId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string location_name = 2;
 * @return {string}
 */
proto.com.chicago.dto.InventoryLocation.prototype.getLocationName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryLocation.prototype.setLocationName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string location_id = 3;
 * @return {string}
 */
proto.com.chicago.dto.InventoryLocation.prototype.getLocationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.com.chicago.dto.InventoryLocation.prototype.setLocationId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.com.chicago.dto.OperationType = {
  INCOMING: 0,
  OUTGOING: 1
};

/**
 * @enum {number}
 */
proto.com.chicago.dto.TransferState = {
  PENDING: 0,
  ACCEPTED: 1,
  REJECTED: 2
};

goog.object.extend(exports, proto.com.chicago.dto);
