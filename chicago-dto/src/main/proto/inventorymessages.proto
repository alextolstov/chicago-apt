syntax = "proto3";

package com.chicago.dto;

import "common.proto";
import "inventory.proto";

option java_package = "com.chicago.dto";

// Brands
message InventoryItemBrandRequest
{
    CrudOperation crud_operation = 1;
    InventoryItemBrand item_brand = 2;
}

message InventoryItemBrandResponse
{
    InventoryItemBrand item_brand = 1;
    TransactionError transaction_error = 2;
}

message InventoryItemBrandsResponse
{
    repeated InventoryItemBrand item_brands = 1;
    TransactionError transaction_error = 2;
}

// Categories
message InventoryItemCategoryRequest
{
    CrudOperation crud_operation = 1;
    InventoryItemCategory item_category = 2;
}

message InventoryItemCategoryResponse
{
    InventoryItemCategory item_category = 1;
    TransactionError transaction_error = 2;
}

message InventoryItemCategoriesResponse
{
    repeated InventoryItemCategory item_categories = 1;
    TransactionError transaction_error = 2;
}

// Units
message InventoryItemUnitRequest
{
    CrudOperation crud_operation = 1;
    InventoryItemUnit item_unit = 2;
}

message InventoryItemUnitResponse
{
    InventoryItemUnit item_unit = 1;
    TransactionError transaction_error = 2;
}

message InventoryItemUnitsResponse
{
    repeated InventoryItemUnit item_units = 1;
    TransactionError transaction_error = 2;
}

// Suppliers
message InventoryItemSupplierRequest
{
    CrudOperation crud_operation = 1;
    InventoryItemSupplier item_supplier = 2;
}

message InventoryItemSupplierResponse
{
    InventoryItemSupplier item_supplier = 1;
    TransactionError transaction_error = 2;
}

message InventoryItemSuppliersResponse
{
    repeated InventoryItemSupplier item_suppliers = 1;
    TransactionError transaction_error = 2;
}

// Catalog Item
message InventoryCatalogItemRequest
{
    CrudOperation crud_operation = 1;
    InventoryCatalogItem inventory_item = 2;
}

message InventoryCatalogItemResponse
{
    InventoryCatalogItem inventory_item = 1;
    TransactionError transaction_error = 2;
}

message InventoryCatalogItemsRequest
{
    string entity_id = 1;
}

message InventoryCatalogItemsResponse
{
    repeated InventoryCatalogItem inventory_items = 1;
    TransactionError transaction_error = 2;
}

// Location
message InventoryLocationRequest
{
    CrudOperation crud_operation = 1;
    InventoryLocation inventory_location = 2;
}

message InventoryLocationResponse
{
    InventoryLocation inventory_location = 1;
    TransactionError transaction_error = 2;
}

message InventoryLocationsResponse
{
    repeated InventoryLocation inventory_locations = 1;
    TransactionError transaction_error = 2;
}
